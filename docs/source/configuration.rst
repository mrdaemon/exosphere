The Configuration File
======================

Exosphere loads all of its settings and inventory from a configuration file.
The configuration file can be provided in multiple formats, including
`yaml`_, `toml`_, and `json`_.

Where the configuration file lives will depend on your platform.
For instance, for a **yaml** configuration file, the default locations are:

.. tabs::

    .. group-tab:: Linux, Unix

        ``~/.config/exosphere/config.yaml``

    .. group-tab:: MacOS

        ``~/Library/Application Support/exosphere/config.yaml``

    .. group-tab:: Windows

        ``%LOCALAPPDATA%/exosphere/config.yaml``

You can of course substitute the file extension with `.toml` or `.json` if you wish
to use those formats instead.

You can also ask exosphere where it expects the configuration file to be on your
platform by running:

.. code-block:: console

    exosphere config dirs


Structure
---------

The configuration file is split into two main sections, `Options` and `Hosts`.
The `Options` section contains general settings for Exosphere, while the `Hosts`
section contains the Inventory of hosts that Exosphere will connect to.

Below is a full example of a configuration file, in all supported formats.
Any option left out will use the default values, which are documented below.

.. tabs::

    .. group-tab:: YAML

        .. literalinclude:: ../../examples/config.yaml

    .. group-tab:: TOML

        .. literalinclude:: ../../examples/config.toml

    .. group-tab:: JSON

        .. literalinclude:: ../../examples/config.json


Options
-------

The options section contains general settings for Exosphere.
These options are applied globally, and affect how Exosphere behaves at runtime.

- :option:`log_level`
- :option:`debug`
- :option:`log_file`
- :option:`cache_autosave`
- :option:`cache_file`
- :option:`stale_threshold`
- :option:`default_timeout`
- :option:`max_threads`

You will find below a detailed list of all available options, their defaults,
and examples of how to set them in the configuration file.


.. option:: log_level

    The logging level for Exosphere. This can be set to one of the following values,
    as a string:

    - DEBUG
    - INFO
    - WARNING
    - ERROR

    This controls the verbosity of the logs generated by Exosphere.

    **Default**: ``INFO``

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  log_level: DEBUG

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                log_level = "DEBUG"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "log_level": "DEBUG"
                    }
                }

.. option:: debug

    Enable debug mode, which sets the root logger to DEBUG level.
    This is useful for development and debugging purposes, if you also
    want to see debug logs from libraries and other components.

    Normally, there's very little reason to enable this unless you are
    actively developing Exosphere or troubleshooting a specific issue.

    **Default**: ``false``

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  debug: true

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                debug = true

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "debug": true
                    }
                }

.. option:: log_file

    A filesystem path to a file where Exosphere will write logs.
    If not set, Exosphere will use the platform default location for logs.

    You can set this to any valid path on your filesystem where you have
    write permissions.

    **Default**: (Platform Default)

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  log_file: /home/alice/tmp/exosphere.log

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                log_file = "/home/alice/exosphere.log"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "log_file": "/home/alice/exosphere.log"
                    }
                }

.. option:: cache_autosave

    Automatically save the state to disk when changes are made.
    This is on by default, and probably should not be turned off
    unless you have a very specific reason to do so.

    If this is disabled, you will need to manually save the state
    with `exosphere inventory save` for changes to systems state
    to persist across executions.

    **Default**: ``true``

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  cache_autosave: false

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                cache_autosave = false

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "cache_autosave": false
                    }
                }

.. option:: cache_file

    A filesystem path to a file where Exosphere will store the state of the inventory.
    If not set, Exosphere will use the platform default location for the cache file.

    This file is used to persist the state of the inventory across executions,
    including the results of discovery, host updates, last check times, and more.

    The file is lzma compressed to save space, and is not human readable.

    It can be cleared with the `exosphere inventory clear` command, without
    having to delete the file manually.

    **Default**: (Platform Default)

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  cache_file: /home/alice/tmp/exosphere.db

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                cache_file = "/home/alice/tmp/exosphere.db"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "cache_file": "/home/alice/tmp/exosphere.db"
                    }
                }

.. option:: stale_threshold

    The number of seconds after which a host data is considered stale.

    If a host has not been refreshed in this many seconds, an asterisk or
    similar flag will be shown in the UIs to indicated that the update count
    may not be accurate, and that the host should be refreshed.

    The default is 24 hours, which is reasonable, but you may want a shorter
    or longer span of time depending on your environment.

    **Default**: ``86400`` (24 hours)

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  stale_threshold: 3600  # 1 hour

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                stale_threshold = 3600  # 1 hour

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "stale_threshold": 3600
                    }
                }

.. option:: default_timeout

    The number of seconds to wait for a response for a host over ssh.

    This is the maximum time Exosphere will wait for a response from a host
    before timing out, flagging the host as offline, or raising an error condition.

    This is useful for hosts that may be slow to respond, or if you have
    a large number of hosts and want to avoid long delays on That One Host.

    .. admonition:: Note

        This is the global value that, by default, applies to all hosts.
        It can be overriden on a per-host basis in the inventory, inside
        the `hosts` section, via :option:`connect_timeout`.


    **Default**: ``10`` (seconds)

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  default_timeout: 60  # 1 minute

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                default_timeout = 60  # 1 minute

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "default_timeout": 60
                    }
                }

.. option:: max_threads

    The maximum number of threads to use for parallel operations.

    This is the maximum number of threads Exosphere will use for parallel
    operations, such as discovery, ping, checking for updates or refreshing catalogs.

    This can be useful to limit the number of concurrent operations, especially
    in environments with many hosts, to avoid overwhelming the network or the computer
    where you are running Exosphere.

    The default is a generous 15 threads, which you may want to lower depending on
    your context.

    **Default**: ``15``

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                options:
                  max_threads: 5  # Limit parallel actions to 5 threads

        .. group-tab:: TOML

            .. code-block:: toml

                [options]
                max_threads = 5  # Limit parallel actions to 5 threads

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "options": {
                        "max_threads": 5
                    }
                }

Inventory
---------

The second section of the configuration file is the `Hosts` section, which is
refered throughout the documentation as the Inventory.

The `Hosts` section contains a list of hosts that Exosphere will connect to, as well
as their connection parameters and any specific option for each host.

Host entries are structured as follows. This example describes two hosts, one of which
has a custom connection timeout value set, overriding :option:`default_timeout`.

.. tabs::
    .. group-tab:: YAML

        .. code-block:: yaml

            hosts:
              - name: myhost
                ip: myhost.example.com
              - name: anotherhost
                ip: 127.0.1.8
                connect_timeout: 30 

    .. group-tab:: TOML

        .. code-block:: toml

            [[hosts]]
            name = "myhost"
            ip = "myhost.example.com"

            [[hosts]]
            name = "anotherhost"
            ip = "127.0.1.8"
            connect_timeout = 30


    .. group-tab:: JSON

        .. code-block:: json

            {
                "hosts": [
                    {
                        "name": "myhost",
                        "ip": "myhost.example.com"
                    },
                    {
                        "name": "anotherhost",
                        "ip": "127.0.1.8",
                        "connect_timeout": 30
                    }
                ]
            }

Mandatory fields for each host entry are:

- :option:`name`: The name of the host, which is used to identify it in the UI and logs.
- :option:`ip`: The address of the host, which can be a hostname or an IP address.

Optional fields for each host entry include:

- :option:`port`: The SSH port to connect to the host. Defaults to 22.
- :option:`username`: An optional SSH username to use when connecting to the host
- :option:`description`: A short string describing the host, to be displayed in UIs
- :option:`connect_timeout`: The number of seconds to wait for a response from the host over SSH.

You will find below the detailed list of all available host options and their defaults.

.. option:: name

    The name of the host, which uniquely identifies the host within the inventory.
    It is recommended that you keep this to a short string, and not a fully qualified domain name,
    although it can be arbitrary.

    .. attention::

        The **name** field has a unicity constraint within the inventory!
        You cannot have two hosts with the same name value, and Exsosphere will
        inform you of this if it is the case, before promptly refusing to load the
        configuration file.

    **Mandatory**: Yes

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost"
                        }
                    ]
                }

.. option:: ip

    The IP address or hostname of the host to connect to over ssh
    This can be a fully qualified domain name, an IP address, or a short hostname.
    It is recommended that you use a fully qualified domain name or an IP address
    to avoid issues with DNS resolution.

    **Mandatory**: Yes

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost
                    ip: myhost.example.com

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"
                ip = "myhost.example.com"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost",
                            "ip": "myhost.example.com"
                        }
                    ]
                }

.. option:: port

    The SSH port to connect to the host. This is optional, and defaults to 22.
    If your host uses a different port for SSH, you can specify it here.

    **Default**: ``22``

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost
                    ip: myhost.example.com
                    port: 2222

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"
                ip = "myhost.example.com"
                port = 2222

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost",
                            "ip": "myhost.example.com",
                            "port": 2222
                        }
                    ]
                }

.. option:: username

    An optional SSH username to use when connecting to the host.

    This is useful if you need to connect to the host with a different user
    than the one you are running Exosphere as.

    **Default**: Current user's username

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost
                    ip: myhost.example.com
                    username: alice

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"
                ip = "myhost.example.com"
                username = "alice"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost",
                            "ip": "myhost.example.com",
                            "username": "alice"
                        }
                    ]
                }

.. option:: description

    A short string describing the host, to be displayed in UIs.
    This is optional, but can be useful to provide additional context
    about the host, such as its role or purpose.

    **Default**: `None`

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost
                    ip: myhost.example.com
                    description: "Web Server"

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"
                ip = "myhost.example.com"
                description = "Web Server"

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost",
                            "ip": "myhost.example.com",
                            "description": "Web Server"
                        }
                    ]
                }

.. option:: connect_timeout

    The number of seconds to wait for a response from the host over SSH.
    This is optional, and defaults to the value set in :option:`default_timeout`.

    If you have hosts that are particularly slow to respond, you can increase this value
    on a per-host basis.

    **Default**: Value of :option:`default_timeout`

    **Example**:

    .. tabs::

        .. group-tab:: YAML

            .. code-block:: yaml

                hosts:
                  - name: myhost
                    ip: myhost.example.com
                    connect_timeout: 30  # 30 seconds

        .. group-tab:: TOML

            .. code-block:: toml

                [[hosts]]
                name = "myhost"
                ip = "myhost.example.com"
                connect_timeout = 30  # 30 seconds

        .. group-tab:: JSON

            .. code-block:: json

                {
                    "hosts": [
                        {
                            "name": "myhost",
                            "ip": "myhost.example.com",
                            "connect_timeout": 30
                        }
                    ]
                }

.. _yaml: https://yaml.org/
.. _toml: https://toml.io/
.. _json: https://www.json.org/